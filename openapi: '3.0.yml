openapi: '3.0.3'
info:
  title: FireSafePro
  version: '1.0'
  description: |
    FireSafePro is a comprehensive web-based application designed to streamline and enhance the management of fire safety equipment, particularly fire extinguishers, for companies and organizations. 
    The primary goal of the application is to support fire safety companies, facility management teams, and safety professionals in maintaining compliance, tracking inventory, managing customer orders, and ensuring regular maintenance of safety products. 

    **Key Objectives of FireSafePro:**
    - **Centralized Management**: FireSafePro provides a centralized platform for managing users, companies, and products, including detailed information on each fire extinguisher type. The system tracks essential details like product specifications, certifications, inventory levels, and maintenance schedules.
    - **Order Tracking and Processing**: With a robust order management module, FireSafePro enables companies to process and track customer orders efficiently. It keeps a record of order statuses, quantities, billing, and shipping details, providing a seamless experience for both customers and vendors.
    - **User and Role Management**: The application includes role-based access control, allowing companies to manage user access and permissions effectively. This supports secure handling of data for administrators and regular users, ensuring proper authorization and data integrity.
    - **Health Monitoring**: A health check endpoint helps administrators monitor the status of the API, ensuring the system is functioning optimally for all users.
    - **Security and Compliance**: With built-in JWT authentication and support for industry-standard certifications (e.g., CE Marking, NFPA compliance), FireSafePro is built to adhere to safety and regulatory standards in fire safety equipment management.

    [Basic Information](https://www.safelincs.co.uk/fire-extinguisher-types/)
servers:
  - url: https://api.server.test/v1

tags:
  - name: Users 
    description: Operations related to managing user information
  - name: Fire Extinguishers
    description: Operations related to managing fire extinguishers
  - name: Companies
    description: Operations related to managing companies, their employees, and products
  - name: Orders
    description: Operations related to managing orders, including details on fire extinguishers purchased
  - name: Health
    description: Operations related to health of the application.



paths:
    # User paths ------------------------------------------------------------------------------------------------------------------------
    /users:
      get:
        tags:
          - Users
        summary: Get all users
        description: Retrieve a list of all users.
        responses:
          '200':
            description: List of users retrieved successfully
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/user'
          '500':
            description: Server error

      post:
        tags:
          - Users
        summary: Create a new user
        description: Add a new user to the system.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        responses:
          '201':
            description: User created successfully
          '400':
            description: Bad request, possibly due to missing required fields
          '500':
            description: Server error

    /users/{username}:
      get:
        tags:
          - Users
        summary: Get a user by username
        description: Retrieve details of a specific user by their username.
        parameters:
          - in: path
            name: username
            required: true
            schema:
              type: string
            description: The username of the user to retrieve
        responses:
          '200':
            description: User details retrieved successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/user'
          '404':
            description: User not found
          '500':
            description: Server error

      put:
        tags:
          - Users
        summary: Update a user
        description: Update the information of an existing user.
        parameters:
          - in: path
            name: username
            required: true
            schema:
              type: string
            description: The username of the user to update
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        responses:
          '200':
            description: User updated successfully
          '400':
            description: Bad request, possibly due to missing or incorrect fields
          '404':
            description: User not found
          '500':
            description: Server error

      delete:
        tags:
          - Users
        summary: Delete a user
        description: Delete an existing user by their username.
        parameters:
          - in: path
            name: username
            required: true
            schema:
              type: string
            description: The username of the user to delete
        responses:
          '204':
            description: User deleted successfully
          '404':
            description: User not found
          '500':
            description: Server error

    /users/signup:
      post:
        tags:
          - Users
        summary: User Sign Up
        description: Register a new user by providing username, password, and user type.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: Unique username for the user
                  password:
                    type: string
                    description: Password for the user
                example:
                  username: "new_user"
                  password: "securepassword123"
        responses:
          '201':
            description: User registered successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "User registered successfully."
                    user_id:
                      type: string
                      example: "user_12345"
          '409':
            description: Username already exists
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'

    /users/signin:
      post:
        tags:
          - Users
        summary: User Sign In
        description: Authenticate an existing user with their username and password.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: The username of the user
                  password:
                    type: string
                    description: The password of the user
                example:
                  username: "existing_user"
                  password: "securepassword123"
        responses:
          '200':
            description: User authenticated successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "User authenticated successfully."
                    token:
                      type: string
                      description: JWT token for authenticated access
                      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          '401':
            description: Invalid username or password
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'

  # Company -----------------------------------------------------------------------------------------------
    /company:
      get:
        tags:
          - Companies
        summary: Get all companies
        description: Retrieve a list of all companies.
        responses:
          '200':
            description: List of companies retrieved successfully
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/company'
          '500':
            description: Server error

      post:
        tags:
          - Companies
        summary: Create a new company
        description: Add a new company with employees and products.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/company'
        responses:
          '201':
            description: Company created successfully
          '400':
            description: Bad request, possibly due to missing required fields
          '500':
            description: Server error

    /companies/{company_id}:
      get:
        tags:
          - Companies
        summary: Get a company by ID
        description: Retrieve details of a specific company by its ID.
        parameters:
          - in: path
            name: company_id
            required: true
            schema:
              type: string
            description: The unique ID of the company to retrieve
        responses:
          '200':
            description: Company details retrieved successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/company'
          '404':
            description: Company not found
          '500':
            description: Server error

      put:
        tags:
          - Companies
        summary: Update a company
        description: Update the information of an existing company, including employees and products.
        parameters:
          - in: path
            name: company_id
            required: true
            schema:
              type: string
            description: The unique ID of the company to update
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/company'
        responses:
          '200':
            description: Company updated successfully
          '400':
            description: Bad request, possibly due to missing or incorrect fields
          '404':
            description: Company not found
          '500':
            description: Server error

      delete:
        tags:
          - Companies
        summary: Delete a company
        description: Delete an existing company by its ID.
        parameters:
          - in: path
            name: company_id
            required: true
            schema:
              type: string
            description: The unique ID of the company to delete
        responses:
          '204':
            description: Company deleted successfully
          '404':
            description: Company not found
          '500':
            description: Server error

  # Fire extinguisher -------------------------------------------------------------------------------------
    /fire_extinguishers:
      get:
        tags:
          - Fire Extinguishers
        summary: Get all fire extinguishers
        description: Retrieve a list of all fire extinguishers in the inventory.
        responses:
          '200':
            description: List of fire extinguishers retrieved successfully
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/fire extinguisher'
          '500':
            description: Server error

      post:
        tags:
          - Fire Extinguishers
        summary: Create a new fire extinguisher
        description: Add a new fire extinguisher to the inventory.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fire extinguisher'
        responses:
          '201':
            description: Fire extinguisher created successfully
          '400':
            description: Bad request, possibly due to missing required fields
          '500':
            description: Server error

    /fire_extinguishers/{product_id}:
      get:
        tags:
          - Fire Extinguishers
        summary: Get a fire extinguisher by product ID
        description: Retrieve details of a specific fire extinguisher by its product ID.
        parameters:
          - in: path
            name: product_id
            required: true
            schema:
              type: string
            description: The unique product ID of the fire extinguisher to retrieve
        responses:
          '200':
            description: Fire extinguisher details retrieved successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/fire extinguisher'
          '404':
            description: Fire extinguisher not found
          '500':
            description: Server error

      put:
        tags:
          - Fire Extinguishers
        summary: Update a fire extinguisher
        description: Update the information of an existing fire extinguisher.
        parameters:
          - in: path
            name: product_id
            required: true
            schema:
              type: string
            description: The unique product ID of the fire extinguisher to update
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fire extinguisher'
        responses:
          '200':
            description: Fire extinguisher updated successfully
          '400':
            description: Bad request, possibly due to missing or incorrect fields
          '404':
            description: Fire extinguisher not found
          '500':
            description: Server error

      delete:
        tags:
          - Fire Extinguishers
        summary: Delete a fire extinguisher
        description: Delete an existing fire extinguisher by its product ID.
        parameters:
          - in: path
            name: product_id
            required: true
            schema:
              type: string
            description: The unique product ID of the fire extinguisher to delete
        responses:
          '204':
            description: Fire extinguisher deleted successfully
          '404':
            description: Fire extinguisher not found
          '500':
            description: Server error

    # Orders -------------------------------------------------------------------------------------
    /orders:
      get:
        tags:
          - Orders
        summary: Get all orders
        description: Retrieve a list of all orders.
        responses:
          '200':
            description: List of orders retrieved successfully
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/order'
          '500':
            description: Server error

      post:
        tags:
          - Orders
        summary: Create a new order
        description: Add a new order with details on purchased fire extinguishers, quantities, and payment.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/order'
        responses:
          '201':
            description: Order created successfully
          '400':
            description: Bad request, possibly due to missing required fields
          '500':
            description: Server error

    /orders/{order_id}:
      get:
        tags:
          - Orders
        summary: Get an order by ID
        description: Retrieve details of a specific order by its ID.
        parameters:
          - in: path
            name: order_id
            required: true
            schema:
              type: string
            description: The unique ID of the order to retrieve
        responses:
          '200':
            description: Order details retrieved successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/order'
          '404':
            description: Order not found
          '500':
            description: Server error

      put:
        tags:
          - Orders
        summary: Update an order
        description: Update the information of an existing order, including items, billing, and shipping details.
        parameters:
          - in: path
            name: order_id
            required: true
            schema:
              type: string
            description: The unique ID of the order to update
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/order'
        responses:
          '200':
            description: Order updated successfully
          '400':
            description: Bad request, possibly due to missing or incorrect fields
          '404':
            description: Order not found
          '500':
            description: Server error

      delete:
        tags:
          - Orders
        summary: Delete an order
        description: Delete an existing order by its ID.
        parameters:
          - in: path
            name: order_id
            required: true
            schema:
              type: string
            description: The unique ID of the order to delete
        responses:
          '204':
            description: Order deleted successfully
          '404':
            description: Order not found
          '500':
            description: Server error

    /health:
      get:
        tags:
          - Health
        summary: Health Check
        description: Check the API’s health status.
        responses:
          '200':
            description: API is healthy
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                      example: "OK"
          '503':
            description: Service Unavailable

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # The user object -----------------------------------------------------------------
    user:
        type: object
        properties:
          username:
            type: string
          password: 
            type: string
          type: 
            type: string
            enum: 
              - admin
              - user
          image: 
            type: object
          company: 
            type: string
          
    
    # The company object --------------------------------------------------------------
    company:
      type: object 
      properties: 
        name: 
          type: string
        image: 
          type: object
        address:
          type: object
          properties:
            street:
              type: string
              description: Street address of the customer.
            city:
              type: string
              description: City of the customer's address.
            state:
              type: string
              description: State or region of the customer's address.
            postal_code:
              type: string
              description: Postal or ZIP code of the customer's location.
            country:
              type: string
              description: Country of the customer's address.
          description: The full address of the customer.
        employees:
          type: array
          items: 
            $ref: '#/components/schemas/user'
        products:
          type: array
          items: 
            $ref: '#/components/schemas/fire extinguisher'


    # The fire extinguisher object -------------------------------------------------
    fire extinguisher:
      properties:
        product_id:
          type: string
          description: This is a UUID code that describes a unique product.
        name:
          type: string
        description:
          type: string
          description: A brief description of the fire extinguisher, including its primary features and intended use cases.
        type: 
          type: string
          enum:
            - Water
            - Water Mist
            - Foam
            - CO2
            - Powder
            - Wet chemical
          description: The type of fire extinguisher based on its extinguishing agent.
        fire_class: 
          type: string
          enum:
            - Class A 
            - Class B 
            - Class C 
            - Class D 
            - Class F 
            - Electrical Fires
          description: The fire classification(s) the extinguisher is suitable for.
        capacity:
          type: integer
        inspection_date:
          type: string
          format: date DD-MM-YYYY
          description: The date of the last safety inspection.
        expiry_date:
          type: string
          format: date DD-MM-YYYY
          description: The expiration date of the extinguisher's contents.
        inventory:
          type: integer
          description: The current stock level of the extinguisher in inventory.
        planned_sales:
          type: integer
          description: The projected sales quantity for the extinguisher.
        certification:
          type: string
          enum:
            - CE Marking
            - UL
            - FM
            - BSI Kitemark
            - EN3
            - DIN
            - NFPA
            - AS
            - ISI Mark
            - TUV
            - ISO
        standards_compliance:
          type: string
          enum:
            - EN3
            - ISO_9001
            - NFPA_10
            - NFPA_17
            - BS EN_1866
            - ANSI UL_299
            - ISO_11602
            - AS_2444
            - JIS
            - CCC
        batch_number:
          type: string
        manufacture_date:
          type: string
          format: date DD-MM-YYYY
        warranty_period:
          type: integer
        service_internal:
          type: string
        last_service_date:
          type: string
          format: date DD-MM-YYYY
        next_service_due:
          type: string
          format: date DD-MM-YYYY
        discount:
          type: integer

    # The customer object -------------------------------------------------
    customer:
      type: object
      properties:
        customer_id:
          type: string
          description: A unique identifier for each customer, typically a UUID.
        name:
          type: string
          description: The full name or company name of the customer.
        contact_person:
          type: string
          description: Name of the primary contact person for the customer (useful if the customer is a company).
        contact_email:
          type: string
          format: email
          description: The primary email address for communication.
        contact_phone:
          type: string
          description: The primary contact phone number.
        address:
          type: object
          properties:
            street:
              type: string
              description: Street address of the customer.
            city:
              type: string
              description: City of the customer's address.
            state:
              type: string
              description: State or region of the customer's address.
            postal_code:
              type: string
              description: Postal or ZIP code of the customer's location.
            country:
              type: string
              description: Country of the customer's address.
          description: The full address of the customer.
        billing_address:
          type: object
          properties:
            street:
              type: string
              description: Street address for billing, if different from primary address.
            city:
              type: string
            state:
              type: string
            postal_code:
              type: string
            country:
              type: string
          description: Optional billing address if it differs from the main address.
        shipping_address:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            state:
              type: string
            postal_code:
              type: string
            country:
              type: string
          description: Optional shipping address if it differs from the main address.
        account_status:
          type: string
          enum:
            - Active
            - Inactive
          description: Status of the customer's account for managing engagement.
        purchase_history:
          type: array
          items:
            $ref: '#/components/schemas/order'
          description: List of past purchases made by the customer.
        service_schedule:
          type: array
          items:
            type: object
            properties:
              product_id:
                type: string
                description: ID of the product under service contract.
              last_service_date:
                type: string
                format: date
                description: The last date the product was serviced.
              next_service_due:
                type: string
                format: date
                description: The next scheduled service date.
          description: Service schedule details for products owned by the customer.
        created_at:
          type: string
          format: date-time
          description: Timestamp for when the customer was added to the system.


    # The order object ------------------------------------------------------------------------------------------------
    order:
      type: object
      properties:
        order_id:
          type: string
          description: A unique identifier for the order, typically a UUID.
        customer_id:
          type: string
          description: The ID of the customer placing the order, linking to the customer object.
        customer_name:
          type: string
          description: The full name or company name of the customer.
        purchase_date:
          type: string
          format: date
          description: The date the order was made (DD-MM-YYYY).
        items:
          type: array
          items:
            type: object
            properties:
              fire_extinguisher:
                $ref: '#/components/schemas/fire extinguisher'
              quantity:
                type: integer
                description: The quantity of this fire extinguisher product ordered.
              unit_price:
                type: number
                description: The price per unit of the fire extinguisher product.
              total_price:
                type: number
                description: Total price for this item (unit_price * quantity).
          description: List of fire extinguisher products ordered, including quantities and costs per item.
        subtotal:
          type: number
          description: The subtotal of the order before any taxes or discounts.
        tax:
          type: number
          description: Total tax amount applied to the order.
        discount:
          type: number
          description: Any discount applied to the total order.
        total_amount:
          type: number
          description: The final total amount for the order, after tax and discount.
        payment_status:
          type: string
          enum:
            - Paid
            - Pending
            - Overdue
          description: Status of the payment for this order.
        payment_method:
          type: string
          enum:
            - Credit Card
            - Bank Transfer
            - Cash
            - PayPal
            - Other
          description: The payment method used for the transaction.
        billing_address:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            state:
              type: string
            postal_code:
              type: string
            country:
              type: string
          description: The billing address for the order.
        shipping_address:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            state:
              type: string
            postal_code:
              type: string
            country:
              type: string
          description: The shipping address for the order, if different from billing.
        created_at:
          type: string
          format: date-time
          description: Timestamp for when the order record was created.
        last_updated:
          type: string
          format: date-time
          description: Timestamp for the last update made to the order record.


    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          description: HTTP status code
        message:
          type: string
          description: Error message
        details:
          type: array
          items:
            type: string
          description: Additional error details if available






